(************************************************************
 *                      IMITATOR MODEL                      
 *
 * Fischer's mutual exclusion protocol
 *
 * Description     : Fischer's mutual exclusion protocol. Version with 3 processes.
 * Correctness     : No two processes in the mutual exclusion
 * Source          : From "Linear Parametric Model Checking of Timed Automata" Hune, Romijn, Stoelinga, Vaandrager, 2002
 * Author          : Hune, Romijn, Stoelinga, Vaandrager
 * Modeling        : Hune, Romijn, Stoelinga, Vaandrager
 * Input by        : Etienne Andre
 *
 * Created         : 2013/12/10
 * Fork from       : fischerHRSV02-2.imi
 * Fork date       : 2015/09/30
 * Last modified   : 2015/09/30
 *
 * IMITATOR version: 2.7.2
 ************************************************************)

var 
	
	x_1, (*P1's clock*)
	x_2, (*P2's clock*)
	x_3, (*P3's clock*)
	global_time,
		:clock;
	

	lock
		: discrete;

	min_rw, max_rw,
	min_delay, max_delay, p_global_time,
		: parameter;


(************************************************************)
automaton process_1
(************************************************************)
synclabs: ;

loc start_1: while x_1 <= max_rw wait {}
	(* Actually lock <> 0 (but no <> in IMITATOR, and <> 0 is equivalent to > 0 *)
	when lock > 0 & x_1 > min_rw do {x_1' = 0} goto start_1;

	when lock = 0 & x_1 > min_rw do {x_1' = 0} goto set_1;

loc set_1: while x_1 <= max_rw wait {}
	(* Actually lock := i *)
	when x_1 > min_rw do {lock' = 1, x_1' = 0} goto tryenter_1;

loc tryenter_1: while x_1 <= max_delay wait {}
	(* Actually lock := i *)
	when x_1 > min_delay & lock = 1 & p_global_time >= global_time goto cs_1;
	(* Actually lock <> i *)
	when x_1 > min_delay & lock > 1 do {x_1' = 0} goto start_1;
	when x_1 > min_delay & lock < 1 do {x_1' = 0} goto start_1;

loc cs_1: while True wait {}
	when True do {x_1' = 0, lock' = 0} goto start_1;

end (*process_1*)



(************************************************************)
automaton process_2
(************************************************************)
synclabs: ;

loc start_2: while x_2 <= max_rw wait {}
	(* Actually lock <> 0 (but no <> in IMITATOR, and <> 0 is equivalent to > 0 *)
	when lock > 0 & x_2 > min_rw do {x_2' = 0} goto start_2;

	when lock = 0 & x_2 > min_rw do {x_2' = 0} goto set_2;

loc set_2: while x_2 <= max_rw wait {}
	(* Actually lock := i *)
	when x_2 > min_rw do {lock' = 2, x_2' = 0} goto tryenter_2;

loc tryenter_2: while x_2 <= max_delay wait {}
	(* Actually lock = i *)
	when x_2 > min_delay & lock = 2 & p_global_time >= global_time goto cs_2;
	(* Actually lock <> i *)
	when x_2 > min_delay & lock > 2 do {x_2' = 0} goto start_2;
	when x_2 > min_delay & lock < 2 do {x_2' = 0} goto start_2;

loc cs_2: while True wait {}
	when True do {x_2' = 0, lock' = 0} goto start_2;

end (*process_2*)



(************************************************************)
automaton process_3
(************************************************************)
synclabs: ;

loc start_3: while x_3 <= max_rw wait {}
	(* Actually lock <> 0 (but no <> in IMITATOR, and <> 0 is equivalent to > 0 *)
	when lock > 0 & x_3 > min_rw do {x_3' = 0} goto start_3;

	when lock = 0 & x_3 > min_rw do {x_3' = 0} goto set_3;

loc set_3: while x_3 <= max_rw wait {}
	(* Actually lock := i *)
	when x_3 > min_rw do {lock' = 3, x_3' = 0} goto tryenter_3;

loc tryenter_3: while x_3 <= max_delay wait {}
	(* Actually lock = i *)
	when x_3 > min_delay & lock = 3 & p_global_time >= global_time goto cs_3;
	(* Actually lock <> i *)
	when x_3 > min_delay & lock > 3 do {x_3' = 0} goto start_3;
	when x_3 > min_delay & lock < 3 do {x_3' = 0} goto start_3;

loc cs_3: while True wait {}
	when True do {x_3' = 0, lock' = 0} goto start_3;

end (*process_3*)



(************************************************************)
(* Initial state *)
(************************************************************)

init :=
	(*------------------------------------------------------------*)
	(*   INITIAL LOCATION *)
	(*------------------------------------------------------------*)
	& loc[process_1] = start_1
	& loc[process_2] = start_2
	& loc[process_3] = start_3
	
	(*------------------------------------------------------------*)
	(* Initial discrete assignments *)
	(*------------------------------------------------------------*)
	& lock = 0

	(*------------------------------------------------------------*)
	(* Initial clock constraints *)
	(*------------------------------------------------------------*)
	& x_1 = 0
	& x_2 = 0
	& x_3 = 0
	& global_time = 0
	& p_global_time >= 0

	(*------------------------------------------------------------*)
	(* Parameter constraints *)
	(*------------------------------------------------------------*)
	& 0 <= min_rw
	& min_rw < max_rw
	& 0 <= min_delay
	& min_delay < max_delay
;


(************************************************************)
(* Property specification *)
(************************************************************)
property := unreachable loc[process_1] = cs_1 & loc[process_2] = cs_2 & loc[process_3] = cs_3;
minimize(p_global_time)


(************************************************************)
(* The end *)
(************************************************************)
end
